// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Stream.proto

#ifndef PROTOBUF_Stream_2eproto__INCLUDED
#define PROTOBUF_Stream_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace StreamPackage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Stream_2eproto();
void protobuf_AssignDesc_Stream_2eproto();
void protobuf_ShutdownFile_Stream_2eproto();

class StreamKey;
class timeval;
class ORMTransaction;
class Stream;

enum ORMTransaction_direct {
  ORMTransaction_direct_DIRECT_UP = 0,
  ORMTransaction_direct_DIRECT_DOWN = 1
};
bool ORMTransaction_direct_IsValid(int value);
const ORMTransaction_direct ORMTransaction_direct_direct_MIN = ORMTransaction_direct_DIRECT_UP;
const ORMTransaction_direct ORMTransaction_direct_direct_MAX = ORMTransaction_direct_DIRECT_DOWN;
const int ORMTransaction_direct_direct_ARRAYSIZE = ORMTransaction_direct_direct_MAX + 1;

const ::google::protobuf::EnumDescriptor* ORMTransaction_direct_descriptor();
inline const ::std::string& ORMTransaction_direct_Name(ORMTransaction_direct value) {
  return ::google::protobuf::internal::NameOfEnum(
    ORMTransaction_direct_descriptor(), value);
}
inline bool ORMTransaction_direct_Parse(
    const ::std::string& name, ORMTransaction_direct* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ORMTransaction_direct>(
    ORMTransaction_direct_descriptor(), name, value);
}
// ===================================================================

class StreamKey : public ::google::protobuf::Message {
 public:
  StreamKey();
  virtual ~StreamKey();

  StreamKey(const StreamKey& from);

  inline StreamKey& operator=(const StreamKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamKey& default_instance();

  void Swap(StreamKey* other);

  // implements Message ----------------------------------------------

  StreamKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamKey& from);
  void MergeFrom(const StreamKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 saddr = 1;
  inline bool has_saddr() const;
  inline void clear_saddr();
  static const int kSaddrFieldNumber = 1;
  inline ::google::protobuf::uint32 saddr() const;
  inline void set_saddr(::google::protobuf::uint32 value);

  // required uint32 daddr = 2;
  inline bool has_daddr() const;
  inline void clear_daddr();
  static const int kDaddrFieldNumber = 2;
  inline ::google::protobuf::uint32 daddr() const;
  inline void set_daddr(::google::protobuf::uint32 value);

  // required uint32 sport = 3;
  inline bool has_sport() const;
  inline void clear_sport();
  static const int kSportFieldNumber = 3;
  inline ::google::protobuf::uint32 sport() const;
  inline void set_sport(::google::protobuf::uint32 value);

  // required uint32 dport = 4;
  inline bool has_dport() const;
  inline void clear_dport();
  static const int kDportFieldNumber = 4;
  inline ::google::protobuf::uint32 dport() const;
  inline void set_dport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:StreamPackage.StreamKey)
 private:
  inline void set_has_saddr();
  inline void clear_has_saddr();
  inline void set_has_daddr();
  inline void clear_has_daddr();
  inline void set_has_sport();
  inline void clear_has_sport();
  inline void set_has_dport();
  inline void clear_has_dport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 saddr_;
  ::google::protobuf::uint32 daddr_;
  ::google::protobuf::uint32 sport_;
  ::google::protobuf::uint32 dport_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Stream_2eproto();
  friend void protobuf_AssignDesc_Stream_2eproto();
  friend void protobuf_ShutdownFile_Stream_2eproto();

  void InitAsDefaultInstance();
  static StreamKey* default_instance_;
};
// -------------------------------------------------------------------

class timeval : public ::google::protobuf::Message {
 public:
  timeval();
  virtual ~timeval();

  timeval(const timeval& from);

  inline timeval& operator=(const timeval& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const timeval& default_instance();

  void Swap(timeval* other);

  // implements Message ----------------------------------------------

  timeval* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const timeval& from);
  void MergeFrom(const timeval& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 tv_sec = 1;
  inline bool has_tv_sec() const;
  inline void clear_tv_sec();
  static const int kTvSecFieldNumber = 1;
  inline ::google::protobuf::int64 tv_sec() const;
  inline void set_tv_sec(::google::protobuf::int64 value);

  // required int64 tv_usec = 2;
  inline bool has_tv_usec() const;
  inline void clear_tv_usec();
  static const int kTvUsecFieldNumber = 2;
  inline ::google::protobuf::int64 tv_usec() const;
  inline void set_tv_usec(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:StreamPackage.timeval)
 private:
  inline void set_has_tv_sec();
  inline void clear_has_tv_sec();
  inline void set_has_tv_usec();
  inline void clear_has_tv_usec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 tv_sec_;
  ::google::protobuf::int64 tv_usec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Stream_2eproto();
  friend void protobuf_AssignDesc_Stream_2eproto();
  friend void protobuf_ShutdownFile_Stream_2eproto();

  void InitAsDefaultInstance();
  static timeval* default_instance_;
};
// -------------------------------------------------------------------

class ORMTransaction : public ::google::protobuf::Message {
 public:
  ORMTransaction();
  virtual ~ORMTransaction();

  ORMTransaction(const ORMTransaction& from);

  inline ORMTransaction& operator=(const ORMTransaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ORMTransaction& default_instance();

  void Swap(ORMTransaction* other);

  // implements Message ----------------------------------------------

  ORMTransaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ORMTransaction& from);
  void MergeFrom(const ORMTransaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ORMTransaction_direct direct;
  static const direct DIRECT_UP = ORMTransaction_direct_DIRECT_UP;
  static const direct DIRECT_DOWN = ORMTransaction_direct_DIRECT_DOWN;
  static inline bool direct_IsValid(int value) {
    return ORMTransaction_direct_IsValid(value);
  }
  static const direct direct_MIN =
    ORMTransaction_direct_direct_MIN;
  static const direct direct_MAX =
    ORMTransaction_direct_direct_MAX;
  static const int direct_ARRAYSIZE =
    ORMTransaction_direct_direct_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  direct_descriptor() {
    return ORMTransaction_direct_descriptor();
  }
  static inline const ::std::string& direct_Name(direct value) {
    return ORMTransaction_direct_Name(value);
  }
  static inline bool direct_Parse(const ::std::string& name,
      direct* value) {
    return ORMTransaction_direct_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 sid = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 1;
  inline ::google::protobuf::int64 sid() const;
  inline void set_sid(::google::protobuf::int64 value);

  // required .StreamPackage.timeval ts = 2;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 2;
  inline const ::StreamPackage::timeval& ts() const;
  inline ::StreamPackage::timeval* mutable_ts();
  inline ::StreamPackage::timeval* release_ts();
  inline void set_allocated_ts(::StreamPackage::timeval* ts);

  // repeated bytes account = 3;
  inline int account_size() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account(int index) const;
  inline ::std::string* mutable_account(int index);
  inline void set_account(int index, const ::std::string& value);
  inline void set_account(int index, const char* value);
  inline void set_account(int index, const void* value, size_t size);
  inline ::std::string* add_account();
  inline void add_account(const ::std::string& value);
  inline void add_account(const char* value);
  inline void add_account(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& account() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_account();

  // required uint32 sip = 4;
  inline bool has_sip() const;
  inline void clear_sip();
  static const int kSipFieldNumber = 4;
  inline ::google::protobuf::uint32 sip() const;
  inline void set_sip(::google::protobuf::uint32 value);

  // required uint32 dip = 5;
  inline bool has_dip() const;
  inline void clear_dip();
  static const int kDipFieldNumber = 5;
  inline ::google::protobuf::uint32 dip() const;
  inline void set_dip(::google::protobuf::uint32 value);

  // required uint32 sport = 6;
  inline bool has_sport() const;
  inline void clear_sport();
  static const int kSportFieldNumber = 6;
  inline ::google::protobuf::uint32 sport() const;
  inline void set_sport(::google::protobuf::uint32 value);

  // required uint32 dport = 7;
  inline bool has_dport() const;
  inline void clear_dport();
  static const int kDportFieldNumber = 7;
  inline ::google::protobuf::uint32 dport() const;
  inline void set_dport(::google::protobuf::uint32 value);

  // required int32 protocol = 8;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 8;
  inline ::google::protobuf::int32 protocol() const;
  inline void set_protocol(::google::protobuf::int32 value);

  // required int32 service = 9;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 9;
  inline ::google::protobuf::int32 service() const;
  inline void set_service(::google::protobuf::int32 value);

  // required uint32 tcp_seq = 10;
  inline bool has_tcp_seq() const;
  inline void clear_tcp_seq();
  static const int kTcpSeqFieldNumber = 10;
  inline ::google::protobuf::uint32 tcp_seq() const;
  inline void set_tcp_seq(::google::protobuf::uint32 value);

  // required uint32 tcp_ack_seq = 11;
  inline bool has_tcp_ack_seq() const;
  inline void clear_tcp_ack_seq();
  static const int kTcpAckSeqFieldNumber = 11;
  inline ::google::protobuf::uint32 tcp_ack_seq() const;
  inline void set_tcp_ack_seq(::google::protobuf::uint32 value);

  // required .StreamPackage.ORMTransaction.direct drt = 12;
  inline bool has_drt() const;
  inline void clear_drt();
  static const int kDrtFieldNumber = 12;
  inline ::StreamPackage::ORMTransaction_direct drt() const;
  inline void set_drt(::StreamPackage::ORMTransaction_direct value);

  // required int32 seq = 13;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 13;
  inline ::google::protobuf::int32 seq() const;
  inline void set_seq(::google::protobuf::int32 value);

  // required int32 duration = 14;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 14;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // required int32 data_len = 15;
  inline bool has_data_len() const;
  inline void clear_data_len();
  static const int kDataLenFieldNumber = 15;
  inline ::google::protobuf::int32 data_len() const;
  inline void set_data_len(::google::protobuf::int32 value);

  // repeated bytes operate = 16;
  inline int operate_size() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 16;
  inline const ::std::string& operate(int index) const;
  inline ::std::string* mutable_operate(int index);
  inline void set_operate(int index, const ::std::string& value);
  inline void set_operate(int index, const char* value);
  inline void set_operate(int index, const void* value, size_t size);
  inline ::std::string* add_operate();
  inline void add_operate(const ::std::string& value);
  inline void add_operate(const char* value);
  inline void add_operate(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& operate() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_operate();

  // repeated bytes object = 17;
  inline int object_size() const;
  inline void clear_object();
  static const int kObjectFieldNumber = 17;
  inline const ::std::string& object(int index) const;
  inline ::std::string* mutable_object(int index);
  inline void set_object(int index, const ::std::string& value);
  inline void set_object(int index, const char* value);
  inline void set_object(int index, const void* value, size_t size);
  inline ::std::string* add_object();
  inline void add_object(const ::std::string& value);
  inline void add_object(const char* value);
  inline void add_object(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& object() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_object();

  // repeated bytes result = 18;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 18;
  inline const ::std::string& result(int index) const;
  inline ::std::string* mutable_result(int index);
  inline void set_result(int index, const ::std::string& value);
  inline void set_result(int index, const char* value);
  inline void set_result(int index, const void* value, size_t size);
  inline ::std::string* add_result();
  inline void add_result(const ::std::string& value);
  inline void add_result(const char* value);
  inline void add_result(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& result() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_result();

  // repeated bytes data = 19;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 19;
  inline const ::std::string& data(int index) const;
  inline ::std::string* mutable_data(int index);
  inline void set_data(int index, const ::std::string& value);
  inline void set_data(int index, const char* value);
  inline void set_data(int index, const void* value, size_t size);
  inline ::std::string* add_data();
  inline void add_data(const ::std::string& value);
  inline void add_data(const char* value);
  inline void add_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();

  // @@protoc_insertion_point(class_scope:StreamPackage.ORMTransaction)
 private:
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_sip();
  inline void clear_has_sip();
  inline void set_has_dip();
  inline void clear_has_dip();
  inline void set_has_sport();
  inline void clear_has_sport();
  inline void set_has_dport();
  inline void clear_has_dport();
  inline void set_has_protocol();
  inline void clear_has_protocol();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_tcp_seq();
  inline void clear_has_tcp_seq();
  inline void set_has_tcp_ack_seq();
  inline void clear_has_tcp_ack_seq();
  inline void set_has_drt();
  inline void clear_has_drt();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_data_len();
  inline void clear_has_data_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 sid_;
  ::StreamPackage::timeval* ts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> account_;
  ::google::protobuf::uint32 sip_;
  ::google::protobuf::uint32 dip_;
  ::google::protobuf::uint32 sport_;
  ::google::protobuf::uint32 dport_;
  ::google::protobuf::int32 protocol_;
  ::google::protobuf::int32 service_;
  ::google::protobuf::uint32 tcp_seq_;
  ::google::protobuf::uint32 tcp_ack_seq_;
  int drt_;
  ::google::protobuf::int32 seq_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 data_len_;
  ::google::protobuf::RepeatedPtrField< ::std::string> operate_;
  ::google::protobuf::RepeatedPtrField< ::std::string> object_;
  ::google::protobuf::RepeatedPtrField< ::std::string> result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_Stream_2eproto();
  friend void protobuf_AssignDesc_Stream_2eproto();
  friend void protobuf_ShutdownFile_Stream_2eproto();

  void InitAsDefaultInstance();
  static ORMTransaction* default_instance_;
};
// -------------------------------------------------------------------

class Stream : public ::google::protobuf::Message {
 public:
  Stream();
  virtual ~Stream();

  Stream(const Stream& from);

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stream& default_instance();

  void Swap(Stream* other);

  // implements Message ----------------------------------------------

  Stream* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .StreamPackage.StreamKey key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::StreamPackage::StreamKey& key() const;
  inline ::StreamPackage::StreamKey* mutable_key();
  inline ::StreamPackage::StreamKey* release_key();
  inline void set_allocated_key(::StreamPackage::StreamKey* key);

  // repeated bytes mac = 2;
  inline int mac_size() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 2;
  inline const ::std::string& mac(int index) const;
  inline ::std::string* mutable_mac(int index);
  inline void set_mac(int index, const ::std::string& value);
  inline void set_mac(int index, const char* value);
  inline void set_mac(int index, const void* value, size_t size);
  inline ::std::string* add_mac();
  inline void add_mac(const ::std::string& value);
  inline void add_mac(const char* value);
  inline void add_mac(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mac() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mac();

  // required .StreamPackage.timeval begin = 3;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 3;
  inline const ::StreamPackage::timeval& begin() const;
  inline ::StreamPackage::timeval* mutable_begin();
  inline ::StreamPackage::timeval* release_begin();
  inline void set_allocated_begin(::StreamPackage::timeval* begin);

  // required int64 live = 4;
  inline bool has_live() const;
  inline void clear_live();
  static const int kLiveFieldNumber = 4;
  inline ::google::protobuf::int64 live() const;
  inline void set_live(::google::protobuf::int64 value);

  // required int32 service = 5;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 5;
  inline ::google::protobuf::int32 service() const;
  inline void set_service(::google::protobuf::int32 value);

  // required uint32 seq = 6;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 6;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);

  // required uint32 ack_seq = 7;
  inline bool has_ack_seq() const;
  inline void clear_ack_seq();
  static const int kAckSeqFieldNumber = 7;
  inline ::google::protobuf::uint32 ack_seq() const;
  inline void set_ack_seq(::google::protobuf::uint32 value);

  // required int32 stat = 8;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 8;
  inline ::google::protobuf::int32 stat() const;
  inline void set_stat(::google::protobuf::int32 value);

  // required int32 flag = 9;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 9;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required int64 sid = 10;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 10;
  inline ::google::protobuf::int64 sid() const;
  inline void set_sid(::google::protobuf::int64 value);

  // required int32 devid = 11;
  inline bool has_devid() const;
  inline void clear_devid();
  static const int kDevidFieldNumber = 11;
  inline ::google::protobuf::int32 devid() const;
  inline void set_devid(::google::protobuf::int32 value);

  // required int32 rid = 12;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 12;
  inline ::google::protobuf::int32 rid() const;
  inline void set_rid(::google::protobuf::int32 value);

  // repeated bytes account = 13;
  inline int account_size() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 13;
  inline const ::std::string& account(int index) const;
  inline ::std::string* mutable_account(int index);
  inline void set_account(int index, const ::std::string& value);
  inline void set_account(int index, const char* value);
  inline void set_account(int index, const void* value, size_t size);
  inline ::std::string* add_account();
  inline void add_account(const ::std::string& value);
  inline void add_account(const char* value);
  inline void add_account(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& account() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_account();

  // required uint32 bytes = 14;
  inline bool has_bytes() const;
  inline void clear_bytes();
  static const int kBytesFieldNumber = 14;
  inline ::google::protobuf::uint32 bytes() const;
  inline void set_bytes(::google::protobuf::uint32 value);

  // required uint32 packets = 15;
  inline bool has_packets() const;
  inline void clear_packets();
  static const int kPacketsFieldNumber = 15;
  inline ::google::protobuf::uint32 packets() const;
  inline void set_packets(::google::protobuf::uint32 value);

  // required uint32 records = 16;
  inline bool has_records() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 16;
  inline ::google::protobuf::uint32 records() const;
  inline void set_records(::google::protobuf::uint32 value);

  // repeated bytes client = 17;
  inline int client_size() const;
  inline void clear_client();
  static const int kClientFieldNumber = 17;
  inline const ::std::string& client(int index) const;
  inline ::std::string* mutable_client(int index);
  inline void set_client(int index, const ::std::string& value);
  inline void set_client(int index, const char* value);
  inline void set_client(int index, const void* value, size_t size);
  inline ::std::string* add_client();
  inline void add_client(const ::std::string& value);
  inline void add_client(const char* value);
  inline void add_client(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& client() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_client();

  // repeated bytes server = 18;
  inline int server_size() const;
  inline void clear_server();
  static const int kServerFieldNumber = 18;
  inline const ::std::string& server(int index) const;
  inline ::std::string* mutable_server(int index);
  inline void set_server(int index, const ::std::string& value);
  inline void set_server(int index, const char* value);
  inline void set_server(int index, const void* value, size_t size);
  inline ::std::string* add_server();
  inline void add_server(const ::std::string& value);
  inline void add_server(const char* value);
  inline void add_server(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& server() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_server();

  // repeated bytes response = 19;
  inline int response_size() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 19;
  inline const ::std::string& response(int index) const;
  inline ::std::string* mutable_response(int index);
  inline void set_response(int index, const ::std::string& value);
  inline void set_response(int index, const char* value);
  inline void set_response(int index, const void* value, size_t size);
  inline ::std::string* add_response();
  inline void add_response(const ::std::string& value);
  inline void add_response(const char* value);
  inline void add_response(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& response() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_response();

  // repeated bytes private_data = 20;
  inline int private_data_size() const;
  inline void clear_private_data();
  static const int kPrivateDataFieldNumber = 20;
  inline const ::std::string& private_data(int index) const;
  inline ::std::string* mutable_private_data(int index);
  inline void set_private_data(int index, const ::std::string& value);
  inline void set_private_data(int index, const char* value);
  inline void set_private_data(int index, const void* value, size_t size);
  inline ::std::string* add_private_data();
  inline void add_private_data(const ::std::string& value);
  inline void add_private_data(const char* value);
  inline void add_private_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& private_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_private_data();

  // required .StreamPackage.ORMTransaction trans = 21;
  inline bool has_trans() const;
  inline void clear_trans();
  static const int kTransFieldNumber = 21;
  inline const ::StreamPackage::ORMTransaction& trans() const;
  inline ::StreamPackage::ORMTransaction* mutable_trans();
  inline ::StreamPackage::ORMTransaction* release_trans();
  inline void set_allocated_trans(::StreamPackage::ORMTransaction* trans);

  // @@protoc_insertion_point(class_scope:StreamPackage.Stream)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_live();
  inline void clear_has_live();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_ack_seq();
  inline void clear_has_ack_seq();
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_devid();
  inline void clear_has_devid();
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_bytes();
  inline void clear_has_bytes();
  inline void set_has_packets();
  inline void clear_has_packets();
  inline void set_has_records();
  inline void clear_has_records();
  inline void set_has_trans();
  inline void clear_has_trans();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::StreamPackage::StreamKey* key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mac_;
  ::StreamPackage::timeval* begin_;
  ::google::protobuf::int64 live_;
  ::google::protobuf::int32 service_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::uint32 ack_seq_;
  ::google::protobuf::int32 stat_;
  ::google::protobuf::int64 sid_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 devid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> account_;
  ::google::protobuf::int32 rid_;
  ::google::protobuf::uint32 bytes_;
  ::google::protobuf::uint32 packets_;
  ::google::protobuf::uint32 records_;
  ::google::protobuf::RepeatedPtrField< ::std::string> client_;
  ::google::protobuf::RepeatedPtrField< ::std::string> server_;
  ::google::protobuf::RepeatedPtrField< ::std::string> response_;
  ::google::protobuf::RepeatedPtrField< ::std::string> private_data_;
  ::StreamPackage::ORMTransaction* trans_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_Stream_2eproto();
  friend void protobuf_AssignDesc_Stream_2eproto();
  friend void protobuf_ShutdownFile_Stream_2eproto();

  void InitAsDefaultInstance();
  static Stream* default_instance_;
};
// ===================================================================


// ===================================================================

// StreamKey

// required uint32 saddr = 1;
inline bool StreamKey::has_saddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamKey::set_has_saddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamKey::clear_has_saddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamKey::clear_saddr() {
  saddr_ = 0u;
  clear_has_saddr();
}
inline ::google::protobuf::uint32 StreamKey::saddr() const {
  return saddr_;
}
inline void StreamKey::set_saddr(::google::protobuf::uint32 value) {
  set_has_saddr();
  saddr_ = value;
}

// required uint32 daddr = 2;
inline bool StreamKey::has_daddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamKey::set_has_daddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamKey::clear_has_daddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamKey::clear_daddr() {
  daddr_ = 0u;
  clear_has_daddr();
}
inline ::google::protobuf::uint32 StreamKey::daddr() const {
  return daddr_;
}
inline void StreamKey::set_daddr(::google::protobuf::uint32 value) {
  set_has_daddr();
  daddr_ = value;
}

// required uint32 sport = 3;
inline bool StreamKey::has_sport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamKey::set_has_sport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamKey::clear_has_sport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamKey::clear_sport() {
  sport_ = 0u;
  clear_has_sport();
}
inline ::google::protobuf::uint32 StreamKey::sport() const {
  return sport_;
}
inline void StreamKey::set_sport(::google::protobuf::uint32 value) {
  set_has_sport();
  sport_ = value;
}

// required uint32 dport = 4;
inline bool StreamKey::has_dport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamKey::set_has_dport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamKey::clear_has_dport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamKey::clear_dport() {
  dport_ = 0u;
  clear_has_dport();
}
inline ::google::protobuf::uint32 StreamKey::dport() const {
  return dport_;
}
inline void StreamKey::set_dport(::google::protobuf::uint32 value) {
  set_has_dport();
  dport_ = value;
}

// -------------------------------------------------------------------

// timeval

// required int64 tv_sec = 1;
inline bool timeval::has_tv_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void timeval::set_has_tv_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void timeval::clear_has_tv_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void timeval::clear_tv_sec() {
  tv_sec_ = GOOGLE_LONGLONG(0);
  clear_has_tv_sec();
}
inline ::google::protobuf::int64 timeval::tv_sec() const {
  return tv_sec_;
}
inline void timeval::set_tv_sec(::google::protobuf::int64 value) {
  set_has_tv_sec();
  tv_sec_ = value;
}

// required int64 tv_usec = 2;
inline bool timeval::has_tv_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void timeval::set_has_tv_usec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void timeval::clear_has_tv_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void timeval::clear_tv_usec() {
  tv_usec_ = GOOGLE_LONGLONG(0);
  clear_has_tv_usec();
}
inline ::google::protobuf::int64 timeval::tv_usec() const {
  return tv_usec_;
}
inline void timeval::set_tv_usec(::google::protobuf::int64 value) {
  set_has_tv_usec();
  tv_usec_ = value;
}

// -------------------------------------------------------------------

// ORMTransaction

// required int64 sid = 1;
inline bool ORMTransaction::has_sid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ORMTransaction::set_has_sid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ORMTransaction::clear_has_sid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ORMTransaction::clear_sid() {
  sid_ = GOOGLE_LONGLONG(0);
  clear_has_sid();
}
inline ::google::protobuf::int64 ORMTransaction::sid() const {
  return sid_;
}
inline void ORMTransaction::set_sid(::google::protobuf::int64 value) {
  set_has_sid();
  sid_ = value;
}

// required .StreamPackage.timeval ts = 2;
inline bool ORMTransaction::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ORMTransaction::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ORMTransaction::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ORMTransaction::clear_ts() {
  if (ts_ != NULL) ts_->::StreamPackage::timeval::Clear();
  clear_has_ts();
}
inline const ::StreamPackage::timeval& ORMTransaction::ts() const {
  return ts_ != NULL ? *ts_ : *default_instance_->ts_;
}
inline ::StreamPackage::timeval* ORMTransaction::mutable_ts() {
  set_has_ts();
  if (ts_ == NULL) ts_ = new ::StreamPackage::timeval;
  return ts_;
}
inline ::StreamPackage::timeval* ORMTransaction::release_ts() {
  clear_has_ts();
  ::StreamPackage::timeval* temp = ts_;
  ts_ = NULL;
  return temp;
}
inline void ORMTransaction::set_allocated_ts(::StreamPackage::timeval* ts) {
  delete ts_;
  ts_ = ts;
  if (ts) {
    set_has_ts();
  } else {
    clear_has_ts();
  }
}

// repeated bytes account = 3;
inline int ORMTransaction::account_size() const {
  return account_.size();
}
inline void ORMTransaction::clear_account() {
  account_.Clear();
}
inline const ::std::string& ORMTransaction::account(int index) const {
  return account_.Get(index);
}
inline ::std::string* ORMTransaction::mutable_account(int index) {
  return account_.Mutable(index);
}
inline void ORMTransaction::set_account(int index, const ::std::string& value) {
  account_.Mutable(index)->assign(value);
}
inline void ORMTransaction::set_account(int index, const char* value) {
  account_.Mutable(index)->assign(value);
}
inline void ORMTransaction::set_account(int index, const void* value, size_t size) {
  account_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ORMTransaction::add_account() {
  return account_.Add();
}
inline void ORMTransaction::add_account(const ::std::string& value) {
  account_.Add()->assign(value);
}
inline void ORMTransaction::add_account(const char* value) {
  account_.Add()->assign(value);
}
inline void ORMTransaction::add_account(const void* value, size_t size) {
  account_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ORMTransaction::account() const {
  return account_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ORMTransaction::mutable_account() {
  return &account_;
}

// required uint32 sip = 4;
inline bool ORMTransaction::has_sip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ORMTransaction::set_has_sip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ORMTransaction::clear_has_sip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ORMTransaction::clear_sip() {
  sip_ = 0u;
  clear_has_sip();
}
inline ::google::protobuf::uint32 ORMTransaction::sip() const {
  return sip_;
}
inline void ORMTransaction::set_sip(::google::protobuf::uint32 value) {
  set_has_sip();
  sip_ = value;
}

// required uint32 dip = 5;
inline bool ORMTransaction::has_dip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ORMTransaction::set_has_dip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ORMTransaction::clear_has_dip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ORMTransaction::clear_dip() {
  dip_ = 0u;
  clear_has_dip();
}
inline ::google::protobuf::uint32 ORMTransaction::dip() const {
  return dip_;
}
inline void ORMTransaction::set_dip(::google::protobuf::uint32 value) {
  set_has_dip();
  dip_ = value;
}

// required uint32 sport = 6;
inline bool ORMTransaction::has_sport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ORMTransaction::set_has_sport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ORMTransaction::clear_has_sport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ORMTransaction::clear_sport() {
  sport_ = 0u;
  clear_has_sport();
}
inline ::google::protobuf::uint32 ORMTransaction::sport() const {
  return sport_;
}
inline void ORMTransaction::set_sport(::google::protobuf::uint32 value) {
  set_has_sport();
  sport_ = value;
}

// required uint32 dport = 7;
inline bool ORMTransaction::has_dport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ORMTransaction::set_has_dport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ORMTransaction::clear_has_dport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ORMTransaction::clear_dport() {
  dport_ = 0u;
  clear_has_dport();
}
inline ::google::protobuf::uint32 ORMTransaction::dport() const {
  return dport_;
}
inline void ORMTransaction::set_dport(::google::protobuf::uint32 value) {
  set_has_dport();
  dport_ = value;
}

// required int32 protocol = 8;
inline bool ORMTransaction::has_protocol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ORMTransaction::set_has_protocol() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ORMTransaction::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ORMTransaction::clear_protocol() {
  protocol_ = 0;
  clear_has_protocol();
}
inline ::google::protobuf::int32 ORMTransaction::protocol() const {
  return protocol_;
}
inline void ORMTransaction::set_protocol(::google::protobuf::int32 value) {
  set_has_protocol();
  protocol_ = value;
}

// required int32 service = 9;
inline bool ORMTransaction::has_service() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ORMTransaction::set_has_service() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ORMTransaction::clear_has_service() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ORMTransaction::clear_service() {
  service_ = 0;
  clear_has_service();
}
inline ::google::protobuf::int32 ORMTransaction::service() const {
  return service_;
}
inline void ORMTransaction::set_service(::google::protobuf::int32 value) {
  set_has_service();
  service_ = value;
}

// required uint32 tcp_seq = 10;
inline bool ORMTransaction::has_tcp_seq() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ORMTransaction::set_has_tcp_seq() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ORMTransaction::clear_has_tcp_seq() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ORMTransaction::clear_tcp_seq() {
  tcp_seq_ = 0u;
  clear_has_tcp_seq();
}
inline ::google::protobuf::uint32 ORMTransaction::tcp_seq() const {
  return tcp_seq_;
}
inline void ORMTransaction::set_tcp_seq(::google::protobuf::uint32 value) {
  set_has_tcp_seq();
  tcp_seq_ = value;
}

// required uint32 tcp_ack_seq = 11;
inline bool ORMTransaction::has_tcp_ack_seq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ORMTransaction::set_has_tcp_ack_seq() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ORMTransaction::clear_has_tcp_ack_seq() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ORMTransaction::clear_tcp_ack_seq() {
  tcp_ack_seq_ = 0u;
  clear_has_tcp_ack_seq();
}
inline ::google::protobuf::uint32 ORMTransaction::tcp_ack_seq() const {
  return tcp_ack_seq_;
}
inline void ORMTransaction::set_tcp_ack_seq(::google::protobuf::uint32 value) {
  set_has_tcp_ack_seq();
  tcp_ack_seq_ = value;
}

// required .StreamPackage.ORMTransaction.direct drt = 12;
inline bool ORMTransaction::has_drt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ORMTransaction::set_has_drt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ORMTransaction::clear_has_drt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ORMTransaction::clear_drt() {
  drt_ = 0;
  clear_has_drt();
}
inline ::StreamPackage::ORMTransaction_direct ORMTransaction::drt() const {
  return static_cast< ::StreamPackage::ORMTransaction_direct >(drt_);
}
inline void ORMTransaction::set_drt(::StreamPackage::ORMTransaction_direct value) {
  assert(::StreamPackage::ORMTransaction_direct_IsValid(value));
  set_has_drt();
  drt_ = value;
}

// required int32 seq = 13;
inline bool ORMTransaction::has_seq() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ORMTransaction::set_has_seq() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ORMTransaction::clear_has_seq() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ORMTransaction::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 ORMTransaction::seq() const {
  return seq_;
}
inline void ORMTransaction::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
}

// required int32 duration = 14;
inline bool ORMTransaction::has_duration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ORMTransaction::set_has_duration() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ORMTransaction::clear_has_duration() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ORMTransaction::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 ORMTransaction::duration() const {
  return duration_;
}
inline void ORMTransaction::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
}

// required int32 data_len = 15;
inline bool ORMTransaction::has_data_len() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ORMTransaction::set_has_data_len() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ORMTransaction::clear_has_data_len() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ORMTransaction::clear_data_len() {
  data_len_ = 0;
  clear_has_data_len();
}
inline ::google::protobuf::int32 ORMTransaction::data_len() const {
  return data_len_;
}
inline void ORMTransaction::set_data_len(::google::protobuf::int32 value) {
  set_has_data_len();
  data_len_ = value;
}

// repeated bytes operate = 16;
inline int ORMTransaction::operate_size() const {
  return operate_.size();
}
inline void ORMTransaction::clear_operate() {
  operate_.Clear();
}
inline const ::std::string& ORMTransaction::operate(int index) const {
  return operate_.Get(index);
}
inline ::std::string* ORMTransaction::mutable_operate(int index) {
  return operate_.Mutable(index);
}
inline void ORMTransaction::set_operate(int index, const ::std::string& value) {
  operate_.Mutable(index)->assign(value);
}
inline void ORMTransaction::set_operate(int index, const char* value) {
  operate_.Mutable(index)->assign(value);
}
inline void ORMTransaction::set_operate(int index, const void* value, size_t size) {
  operate_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ORMTransaction::add_operate() {
  return operate_.Add();
}
inline void ORMTransaction::add_operate(const ::std::string& value) {
  operate_.Add()->assign(value);
}
inline void ORMTransaction::add_operate(const char* value) {
  operate_.Add()->assign(value);
}
inline void ORMTransaction::add_operate(const void* value, size_t size) {
  operate_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ORMTransaction::operate() const {
  return operate_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ORMTransaction::mutable_operate() {
  return &operate_;
}

// repeated bytes object = 17;
inline int ORMTransaction::object_size() const {
  return object_.size();
}
inline void ORMTransaction::clear_object() {
  object_.Clear();
}
inline const ::std::string& ORMTransaction::object(int index) const {
  return object_.Get(index);
}
inline ::std::string* ORMTransaction::mutable_object(int index) {
  return object_.Mutable(index);
}
inline void ORMTransaction::set_object(int index, const ::std::string& value) {
  object_.Mutable(index)->assign(value);
}
inline void ORMTransaction::set_object(int index, const char* value) {
  object_.Mutable(index)->assign(value);
}
inline void ORMTransaction::set_object(int index, const void* value, size_t size) {
  object_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ORMTransaction::add_object() {
  return object_.Add();
}
inline void ORMTransaction::add_object(const ::std::string& value) {
  object_.Add()->assign(value);
}
inline void ORMTransaction::add_object(const char* value) {
  object_.Add()->assign(value);
}
inline void ORMTransaction::add_object(const void* value, size_t size) {
  object_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ORMTransaction::object() const {
  return object_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ORMTransaction::mutable_object() {
  return &object_;
}

// repeated bytes result = 18;
inline int ORMTransaction::result_size() const {
  return result_.size();
}
inline void ORMTransaction::clear_result() {
  result_.Clear();
}
inline const ::std::string& ORMTransaction::result(int index) const {
  return result_.Get(index);
}
inline ::std::string* ORMTransaction::mutable_result(int index) {
  return result_.Mutable(index);
}
inline void ORMTransaction::set_result(int index, const ::std::string& value) {
  result_.Mutable(index)->assign(value);
}
inline void ORMTransaction::set_result(int index, const char* value) {
  result_.Mutable(index)->assign(value);
}
inline void ORMTransaction::set_result(int index, const void* value, size_t size) {
  result_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ORMTransaction::add_result() {
  return result_.Add();
}
inline void ORMTransaction::add_result(const ::std::string& value) {
  result_.Add()->assign(value);
}
inline void ORMTransaction::add_result(const char* value) {
  result_.Add()->assign(value);
}
inline void ORMTransaction::add_result(const void* value, size_t size) {
  result_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ORMTransaction::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ORMTransaction::mutable_result() {
  return &result_;
}

// repeated bytes data = 19;
inline int ORMTransaction::data_size() const {
  return data_.size();
}
inline void ORMTransaction::clear_data() {
  data_.Clear();
}
inline const ::std::string& ORMTransaction::data(int index) const {
  return data_.Get(index);
}
inline ::std::string* ORMTransaction::mutable_data(int index) {
  return data_.Mutable(index);
}
inline void ORMTransaction::set_data(int index, const ::std::string& value) {
  data_.Mutable(index)->assign(value);
}
inline void ORMTransaction::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
}
inline void ORMTransaction::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ORMTransaction::add_data() {
  return data_.Add();
}
inline void ORMTransaction::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
}
inline void ORMTransaction::add_data(const char* value) {
  data_.Add()->assign(value);
}
inline void ORMTransaction::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ORMTransaction::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ORMTransaction::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// Stream

// required .StreamPackage.StreamKey key = 1;
inline bool Stream::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stream::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stream::clear_key() {
  if (key_ != NULL) key_->::StreamPackage::StreamKey::Clear();
  clear_has_key();
}
inline const ::StreamPackage::StreamKey& Stream::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::StreamPackage::StreamKey* Stream::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::StreamPackage::StreamKey;
  return key_;
}
inline ::StreamPackage::StreamKey* Stream::release_key() {
  clear_has_key();
  ::StreamPackage::StreamKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline void Stream::set_allocated_key(::StreamPackage::StreamKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
}

// repeated bytes mac = 2;
inline int Stream::mac_size() const {
  return mac_.size();
}
inline void Stream::clear_mac() {
  mac_.Clear();
}
inline const ::std::string& Stream::mac(int index) const {
  return mac_.Get(index);
}
inline ::std::string* Stream::mutable_mac(int index) {
  return mac_.Mutable(index);
}
inline void Stream::set_mac(int index, const ::std::string& value) {
  mac_.Mutable(index)->assign(value);
}
inline void Stream::set_mac(int index, const char* value) {
  mac_.Mutable(index)->assign(value);
}
inline void Stream::set_mac(int index, const void* value, size_t size) {
  mac_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stream::add_mac() {
  return mac_.Add();
}
inline void Stream::add_mac(const ::std::string& value) {
  mac_.Add()->assign(value);
}
inline void Stream::add_mac(const char* value) {
  mac_.Add()->assign(value);
}
inline void Stream::add_mac(const void* value, size_t size) {
  mac_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Stream::mac() const {
  return mac_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Stream::mutable_mac() {
  return &mac_;
}

// required .StreamPackage.timeval begin = 3;
inline bool Stream::has_begin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stream::set_has_begin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stream::clear_has_begin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stream::clear_begin() {
  if (begin_ != NULL) begin_->::StreamPackage::timeval::Clear();
  clear_has_begin();
}
inline const ::StreamPackage::timeval& Stream::begin() const {
  return begin_ != NULL ? *begin_ : *default_instance_->begin_;
}
inline ::StreamPackage::timeval* Stream::mutable_begin() {
  set_has_begin();
  if (begin_ == NULL) begin_ = new ::StreamPackage::timeval;
  return begin_;
}
inline ::StreamPackage::timeval* Stream::release_begin() {
  clear_has_begin();
  ::StreamPackage::timeval* temp = begin_;
  begin_ = NULL;
  return temp;
}
inline void Stream::set_allocated_begin(::StreamPackage::timeval* begin) {
  delete begin_;
  begin_ = begin;
  if (begin) {
    set_has_begin();
  } else {
    clear_has_begin();
  }
}

// required int64 live = 4;
inline bool Stream::has_live() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stream::set_has_live() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stream::clear_has_live() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stream::clear_live() {
  live_ = GOOGLE_LONGLONG(0);
  clear_has_live();
}
inline ::google::protobuf::int64 Stream::live() const {
  return live_;
}
inline void Stream::set_live(::google::protobuf::int64 value) {
  set_has_live();
  live_ = value;
}

// required int32 service = 5;
inline bool Stream::has_service() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Stream::set_has_service() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Stream::clear_has_service() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Stream::clear_service() {
  service_ = 0;
  clear_has_service();
}
inline ::google::protobuf::int32 Stream::service() const {
  return service_;
}
inline void Stream::set_service(::google::protobuf::int32 value) {
  set_has_service();
  service_ = value;
}

// required uint32 seq = 6;
inline bool Stream::has_seq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Stream::set_has_seq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Stream::clear_has_seq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Stream::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 Stream::seq() const {
  return seq_;
}
inline void Stream::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
}

// required uint32 ack_seq = 7;
inline bool Stream::has_ack_seq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Stream::set_has_ack_seq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Stream::clear_has_ack_seq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Stream::clear_ack_seq() {
  ack_seq_ = 0u;
  clear_has_ack_seq();
}
inline ::google::protobuf::uint32 Stream::ack_seq() const {
  return ack_seq_;
}
inline void Stream::set_ack_seq(::google::protobuf::uint32 value) {
  set_has_ack_seq();
  ack_seq_ = value;
}

// required int32 stat = 8;
inline bool Stream::has_stat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Stream::set_has_stat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Stream::clear_has_stat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Stream::clear_stat() {
  stat_ = 0;
  clear_has_stat();
}
inline ::google::protobuf::int32 Stream::stat() const {
  return stat_;
}
inline void Stream::set_stat(::google::protobuf::int32 value) {
  set_has_stat();
  stat_ = value;
}

// required int32 flag = 9;
inline bool Stream::has_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Stream::set_has_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Stream::clear_has_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Stream::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 Stream::flag() const {
  return flag_;
}
inline void Stream::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// required int64 sid = 10;
inline bool Stream::has_sid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Stream::set_has_sid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Stream::clear_has_sid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Stream::clear_sid() {
  sid_ = GOOGLE_LONGLONG(0);
  clear_has_sid();
}
inline ::google::protobuf::int64 Stream::sid() const {
  return sid_;
}
inline void Stream::set_sid(::google::protobuf::int64 value) {
  set_has_sid();
  sid_ = value;
}

// required int32 devid = 11;
inline bool Stream::has_devid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Stream::set_has_devid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Stream::clear_has_devid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Stream::clear_devid() {
  devid_ = 0;
  clear_has_devid();
}
inline ::google::protobuf::int32 Stream::devid() const {
  return devid_;
}
inline void Stream::set_devid(::google::protobuf::int32 value) {
  set_has_devid();
  devid_ = value;
}

// required int32 rid = 12;
inline bool Stream::has_rid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Stream::set_has_rid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Stream::clear_has_rid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Stream::clear_rid() {
  rid_ = 0;
  clear_has_rid();
}
inline ::google::protobuf::int32 Stream::rid() const {
  return rid_;
}
inline void Stream::set_rid(::google::protobuf::int32 value) {
  set_has_rid();
  rid_ = value;
}

// repeated bytes account = 13;
inline int Stream::account_size() const {
  return account_.size();
}
inline void Stream::clear_account() {
  account_.Clear();
}
inline const ::std::string& Stream::account(int index) const {
  return account_.Get(index);
}
inline ::std::string* Stream::mutable_account(int index) {
  return account_.Mutable(index);
}
inline void Stream::set_account(int index, const ::std::string& value) {
  account_.Mutable(index)->assign(value);
}
inline void Stream::set_account(int index, const char* value) {
  account_.Mutable(index)->assign(value);
}
inline void Stream::set_account(int index, const void* value, size_t size) {
  account_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stream::add_account() {
  return account_.Add();
}
inline void Stream::add_account(const ::std::string& value) {
  account_.Add()->assign(value);
}
inline void Stream::add_account(const char* value) {
  account_.Add()->assign(value);
}
inline void Stream::add_account(const void* value, size_t size) {
  account_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Stream::account() const {
  return account_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Stream::mutable_account() {
  return &account_;
}

// required uint32 bytes = 14;
inline bool Stream::has_bytes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Stream::set_has_bytes() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Stream::clear_has_bytes() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Stream::clear_bytes() {
  bytes_ = 0u;
  clear_has_bytes();
}
inline ::google::protobuf::uint32 Stream::bytes() const {
  return bytes_;
}
inline void Stream::set_bytes(::google::protobuf::uint32 value) {
  set_has_bytes();
  bytes_ = value;
}

// required uint32 packets = 15;
inline bool Stream::has_packets() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Stream::set_has_packets() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Stream::clear_has_packets() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Stream::clear_packets() {
  packets_ = 0u;
  clear_has_packets();
}
inline ::google::protobuf::uint32 Stream::packets() const {
  return packets_;
}
inline void Stream::set_packets(::google::protobuf::uint32 value) {
  set_has_packets();
  packets_ = value;
}

// required uint32 records = 16;
inline bool Stream::has_records() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Stream::set_has_records() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Stream::clear_has_records() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Stream::clear_records() {
  records_ = 0u;
  clear_has_records();
}
inline ::google::protobuf::uint32 Stream::records() const {
  return records_;
}
inline void Stream::set_records(::google::protobuf::uint32 value) {
  set_has_records();
  records_ = value;
}

// repeated bytes client = 17;
inline int Stream::client_size() const {
  return client_.size();
}
inline void Stream::clear_client() {
  client_.Clear();
}
inline const ::std::string& Stream::client(int index) const {
  return client_.Get(index);
}
inline ::std::string* Stream::mutable_client(int index) {
  return client_.Mutable(index);
}
inline void Stream::set_client(int index, const ::std::string& value) {
  client_.Mutable(index)->assign(value);
}
inline void Stream::set_client(int index, const char* value) {
  client_.Mutable(index)->assign(value);
}
inline void Stream::set_client(int index, const void* value, size_t size) {
  client_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stream::add_client() {
  return client_.Add();
}
inline void Stream::add_client(const ::std::string& value) {
  client_.Add()->assign(value);
}
inline void Stream::add_client(const char* value) {
  client_.Add()->assign(value);
}
inline void Stream::add_client(const void* value, size_t size) {
  client_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Stream::client() const {
  return client_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Stream::mutable_client() {
  return &client_;
}

// repeated bytes server = 18;
inline int Stream::server_size() const {
  return server_.size();
}
inline void Stream::clear_server() {
  server_.Clear();
}
inline const ::std::string& Stream::server(int index) const {
  return server_.Get(index);
}
inline ::std::string* Stream::mutable_server(int index) {
  return server_.Mutable(index);
}
inline void Stream::set_server(int index, const ::std::string& value) {
  server_.Mutable(index)->assign(value);
}
inline void Stream::set_server(int index, const char* value) {
  server_.Mutable(index)->assign(value);
}
inline void Stream::set_server(int index, const void* value, size_t size) {
  server_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stream::add_server() {
  return server_.Add();
}
inline void Stream::add_server(const ::std::string& value) {
  server_.Add()->assign(value);
}
inline void Stream::add_server(const char* value) {
  server_.Add()->assign(value);
}
inline void Stream::add_server(const void* value, size_t size) {
  server_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Stream::server() const {
  return server_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Stream::mutable_server() {
  return &server_;
}

// repeated bytes response = 19;
inline int Stream::response_size() const {
  return response_.size();
}
inline void Stream::clear_response() {
  response_.Clear();
}
inline const ::std::string& Stream::response(int index) const {
  return response_.Get(index);
}
inline ::std::string* Stream::mutable_response(int index) {
  return response_.Mutable(index);
}
inline void Stream::set_response(int index, const ::std::string& value) {
  response_.Mutable(index)->assign(value);
}
inline void Stream::set_response(int index, const char* value) {
  response_.Mutable(index)->assign(value);
}
inline void Stream::set_response(int index, const void* value, size_t size) {
  response_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stream::add_response() {
  return response_.Add();
}
inline void Stream::add_response(const ::std::string& value) {
  response_.Add()->assign(value);
}
inline void Stream::add_response(const char* value) {
  response_.Add()->assign(value);
}
inline void Stream::add_response(const void* value, size_t size) {
  response_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Stream::response() const {
  return response_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Stream::mutable_response() {
  return &response_;
}

// repeated bytes private_data = 20;
inline int Stream::private_data_size() const {
  return private_data_.size();
}
inline void Stream::clear_private_data() {
  private_data_.Clear();
}
inline const ::std::string& Stream::private_data(int index) const {
  return private_data_.Get(index);
}
inline ::std::string* Stream::mutable_private_data(int index) {
  return private_data_.Mutable(index);
}
inline void Stream::set_private_data(int index, const ::std::string& value) {
  private_data_.Mutable(index)->assign(value);
}
inline void Stream::set_private_data(int index, const char* value) {
  private_data_.Mutable(index)->assign(value);
}
inline void Stream::set_private_data(int index, const void* value, size_t size) {
  private_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stream::add_private_data() {
  return private_data_.Add();
}
inline void Stream::add_private_data(const ::std::string& value) {
  private_data_.Add()->assign(value);
}
inline void Stream::add_private_data(const char* value) {
  private_data_.Add()->assign(value);
}
inline void Stream::add_private_data(const void* value, size_t size) {
  private_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Stream::private_data() const {
  return private_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Stream::mutable_private_data() {
  return &private_data_;
}

// required .StreamPackage.ORMTransaction trans = 21;
inline bool Stream::has_trans() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Stream::set_has_trans() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Stream::clear_has_trans() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Stream::clear_trans() {
  if (trans_ != NULL) trans_->::StreamPackage::ORMTransaction::Clear();
  clear_has_trans();
}
inline const ::StreamPackage::ORMTransaction& Stream::trans() const {
  return trans_ != NULL ? *trans_ : *default_instance_->trans_;
}
inline ::StreamPackage::ORMTransaction* Stream::mutable_trans() {
  set_has_trans();
  if (trans_ == NULL) trans_ = new ::StreamPackage::ORMTransaction;
  return trans_;
}
inline ::StreamPackage::ORMTransaction* Stream::release_trans() {
  clear_has_trans();
  ::StreamPackage::ORMTransaction* temp = trans_;
  trans_ = NULL;
  return temp;
}
inline void Stream::set_allocated_trans(::StreamPackage::ORMTransaction* trans) {
  delete trans_;
  trans_ = trans;
  if (trans) {
    set_has_trans();
  } else {
    clear_has_trans();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StreamPackage

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StreamPackage::ORMTransaction_direct>() {
  return ::StreamPackage::ORMTransaction_direct_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Stream_2eproto__INCLUDED

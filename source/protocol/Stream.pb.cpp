// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Stream.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Stream.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace StreamPackage {

namespace {

const ::google::protobuf::Descriptor* StreamKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* timeval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  timeval_reflection_ = NULL;
const ::google::protobuf::Descriptor* ORMTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ORMTransaction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ORMTransaction_direct_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Stream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stream_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Stream_2eproto() {
  protobuf_AddDesc_Stream_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Stream.proto");
  GOOGLE_CHECK(file != NULL);
  StreamKey_descriptor_ = file->message_type(0);
  static const int StreamKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamKey, saddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamKey, daddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamKey, sport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamKey, dport_),
  };
  StreamKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamKey_descriptor_,
      StreamKey::default_instance_,
      StreamKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamKey));
  timeval_descriptor_ = file->message_type(1);
  static const int timeval_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(timeval, tv_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(timeval, tv_usec_),
  };
  timeval_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      timeval_descriptor_,
      timeval::default_instance_,
      timeval_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(timeval, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(timeval, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(timeval));
  ORMTransaction_descriptor_ = file->message_type(2);
  static const int ORMTransaction_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, sip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, dip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, sport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, dport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, tcp_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, tcp_ack_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, drt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, data_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, data_),
  };
  ORMTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ORMTransaction_descriptor_,
      ORMTransaction::default_instance_,
      ORMTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORMTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ORMTransaction));
  ORMTransaction_direct_descriptor_ = ORMTransaction_descriptor_->enum_type(0);
  Stream_descriptor_ = file->message_type(3);
  static const int Stream_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, live_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, ack_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, private_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, trans_),
  };
  Stream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stream_descriptor_,
      Stream::default_instance_,
      Stream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stream));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Stream_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamKey_descriptor_, &StreamKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    timeval_descriptor_, &timeval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ORMTransaction_descriptor_, &ORMTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stream_descriptor_, &Stream::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Stream_2eproto() {
  delete StreamKey::default_instance_;
  delete StreamKey_reflection_;
  delete timeval::default_instance_;
  delete timeval_reflection_;
  delete ORMTransaction::default_instance_;
  delete ORMTransaction_reflection_;
  delete Stream::default_instance_;
  delete Stream_reflection_;
}

void protobuf_AddDesc_Stream_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Stream.proto\022\rStreamPackage\"G\n\tStreamK"
    "ey\022\r\n\005saddr\030\001 \002(\r\022\r\n\005daddr\030\002 \002(\r\022\r\n\005spor"
    "t\030\003 \002(\r\022\r\n\005dport\030\004 \002(\r\"*\n\007timeval\022\016\n\006tv_"
    "sec\030\001 \002(\003\022\017\n\007tv_usec\030\002 \002(\003\"\240\003\n\016ORMTransa"
    "ction\022\013\n\003sid\030\001 \002(\003\022\"\n\002ts\030\002 \002(\0132\026.StreamP"
    "ackage.timeval\022\017\n\007account\030\003 \003(\014\022\013\n\003sip\030\004"
    " \002(\r\022\013\n\003dip\030\005 \002(\r\022\r\n\005sport\030\006 \002(\r\022\r\n\005dpor"
    "t\030\007 \002(\r\022\020\n\010protocol\030\010 \002(\005\022\017\n\007service\030\t \002"
    "(\005\022\017\n\007tcp_seq\030\n \002(\r\022\023\n\013tcp_ack_seq\030\013 \002(\r"
    "\0221\n\003drt\030\014 \002(\0162$.StreamPackage.ORMTransac"
    "tion.direct\022\013\n\003seq\030\r \002(\005\022\020\n\010duration\030\016 \002"
    "(\005\022\020\n\010data_len\030\017 \002(\005\022\017\n\007operate\030\020 \003(\014\022\016\n"
    "\006object\030\021 \003(\014\022\016\n\006result\030\022 \003(\014\022\014\n\004data\030\023 "
    "\003(\014\"(\n\006direct\022\r\n\tDIRECT_UP\020\000\022\017\n\013DIRECT_D"
    "OWN\020\001\"\235\003\n\006Stream\022%\n\003key\030\001 \002(\0132\030.StreamPa"
    "ckage.StreamKey\022\013\n\003mac\030\002 \003(\014\022%\n\005begin\030\003 "
    "\002(\0132\026.StreamPackage.timeval\022\014\n\004live\030\004 \002("
    "\003\022\017\n\007service\030\005 \002(\005\022\013\n\003seq\030\006 \002(\r\022\017\n\007ack_s"
    "eq\030\007 \002(\r\022\014\n\004stat\030\010 \002(\005\022\014\n\004flag\030\t \002(\005\022\013\n\003"
    "sid\030\n \002(\003\022\r\n\005devid\030\013 \002(\005\022\013\n\003rid\030\014 \002(\005\022\017\n"
    "\007account\030\r \003(\014\022\r\n\005bytes\030\016 \002(\r\022\017\n\007packets"
    "\030\017 \002(\r\022\017\n\007records\030\020 \002(\r\022\016\n\006client\030\021 \003(\014\022"
    "\016\n\006server\030\022 \003(\014\022\020\n\010response\030\023 \003(\014\022\024\n\014pri"
    "vate_data\030\024 \003(\014\022,\n\005trans\030\025 \002(\0132\035.StreamP"
    "ackage.ORMTransaction", 981);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Stream.proto", &protobuf_RegisterTypes);
  StreamKey::default_instance_ = new StreamKey();
  timeval::default_instance_ = new timeval();
  ORMTransaction::default_instance_ = new ORMTransaction();
  Stream::default_instance_ = new Stream();
  StreamKey::default_instance_->InitAsDefaultInstance();
  timeval::default_instance_->InitAsDefaultInstance();
  ORMTransaction::default_instance_->InitAsDefaultInstance();
  Stream::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Stream_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Stream_2eproto {
  StaticDescriptorInitializer_Stream_2eproto() {
    protobuf_AddDesc_Stream_2eproto();
  }
} static_descriptor_initializer_Stream_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StreamKey::kSaddrFieldNumber;
const int StreamKey::kDaddrFieldNumber;
const int StreamKey::kSportFieldNumber;
const int StreamKey::kDportFieldNumber;
#endif  // !_MSC_VER

StreamKey::StreamKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamKey::InitAsDefaultInstance() {
}

StreamKey::StreamKey(const StreamKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamKey::SharedCtor() {
  _cached_size_ = 0;
  saddr_ = 0u;
  daddr_ = 0u;
  sport_ = 0u;
  dport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamKey::~StreamKey() {
  SharedDtor();
}

void StreamKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamKey_descriptor_;
}

const StreamKey& StreamKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stream_2eproto();
  return *default_instance_;
}

StreamKey* StreamKey::default_instance_ = NULL;

StreamKey* StreamKey::New() const {
  return new StreamKey;
}

void StreamKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    saddr_ = 0u;
    daddr_ = 0u;
    sport_ = 0u;
    dport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 saddr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saddr_)));
          set_has_saddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_daddr;
        break;
      }

      // required uint32 daddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daddr_)));
          set_has_daddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sport;
        break;
      }

      // required uint32 sport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sport_)));
          set_has_sport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dport;
        break;
      }

      // required uint32 dport = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dport_)));
          set_has_dport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 saddr = 1;
  if (has_saddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->saddr(), output);
  }

  // required uint32 daddr = 2;
  if (has_daddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->daddr(), output);
  }

  // required uint32 sport = 3;
  if (has_sport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sport(), output);
  }

  // required uint32 dport = 4;
  if (has_dport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 saddr = 1;
  if (has_saddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->saddr(), target);
  }

  // required uint32 daddr = 2;
  if (has_daddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->daddr(), target);
  }

  // required uint32 sport = 3;
  if (has_sport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sport(), target);
  }

  // required uint32 dport = 4;
  if (has_dport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 saddr = 1;
    if (has_saddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saddr());
    }

    // required uint32 daddr = 2;
    if (has_daddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daddr());
    }

    // required uint32 sport = 3;
    if (has_sport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sport());
    }

    // required uint32 dport = 4;
    if (has_dport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamKey::MergeFrom(const StreamKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saddr()) {
      set_saddr(from.saddr());
    }
    if (from.has_daddr()) {
      set_daddr(from.daddr());
    }
    if (from.has_sport()) {
      set_sport(from.sport());
    }
    if (from.has_dport()) {
      set_dport(from.dport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamKey::CopyFrom(const StreamKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void StreamKey::Swap(StreamKey* other) {
  if (other != this) {
    std::swap(saddr_, other->saddr_);
    std::swap(daddr_, other->daddr_);
    std::swap(sport_, other->sport_);
    std::swap(dport_, other->dport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamKey_descriptor_;
  metadata.reflection = StreamKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int timeval::kTvSecFieldNumber;
const int timeval::kTvUsecFieldNumber;
#endif  // !_MSC_VER

timeval::timeval()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void timeval::InitAsDefaultInstance() {
}

timeval::timeval(const timeval& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void timeval::SharedCtor() {
  _cached_size_ = 0;
  tv_sec_ = GOOGLE_LONGLONG(0);
  tv_usec_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

timeval::~timeval() {
  SharedDtor();
}

void timeval::SharedDtor() {
  if (this != default_instance_) {
  }
}

void timeval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* timeval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return timeval_descriptor_;
}

const timeval& timeval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stream_2eproto();
  return *default_instance_;
}

timeval* timeval::default_instance_ = NULL;

timeval* timeval::New() const {
  return new timeval;
}

void timeval::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tv_sec_ = GOOGLE_LONGLONG(0);
    tv_usec_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool timeval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tv_sec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tv_sec_)));
          set_has_tv_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tv_usec;
        break;
      }

      // required int64 tv_usec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tv_usec_)));
          set_has_tv_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void timeval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 tv_sec = 1;
  if (has_tv_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tv_sec(), output);
  }

  // required int64 tv_usec = 2;
  if (has_tv_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tv_usec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* timeval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 tv_sec = 1;
  if (has_tv_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tv_sec(), target);
  }

  // required int64 tv_usec = 2;
  if (has_tv_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tv_usec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int timeval::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 tv_sec = 1;
    if (has_tv_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tv_sec());
    }

    // required int64 tv_usec = 2;
    if (has_tv_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tv_usec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void timeval::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const timeval* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const timeval*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void timeval::MergeFrom(const timeval& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tv_sec()) {
      set_tv_sec(from.tv_sec());
    }
    if (from.has_tv_usec()) {
      set_tv_usec(from.tv_usec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void timeval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void timeval::CopyFrom(const timeval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool timeval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void timeval::Swap(timeval* other) {
  if (other != this) {
    std::swap(tv_sec_, other->tv_sec_);
    std::swap(tv_usec_, other->tv_usec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata timeval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = timeval_descriptor_;
  metadata.reflection = timeval_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ORMTransaction_direct_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ORMTransaction_direct_descriptor_;
}
bool ORMTransaction_direct_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ORMTransaction_direct ORMTransaction::DIRECT_UP;
const ORMTransaction_direct ORMTransaction::DIRECT_DOWN;
const ORMTransaction_direct ORMTransaction::direct_MIN;
const ORMTransaction_direct ORMTransaction::direct_MAX;
const int ORMTransaction::direct_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ORMTransaction::kSidFieldNumber;
const int ORMTransaction::kTsFieldNumber;
const int ORMTransaction::kAccountFieldNumber;
const int ORMTransaction::kSipFieldNumber;
const int ORMTransaction::kDipFieldNumber;
const int ORMTransaction::kSportFieldNumber;
const int ORMTransaction::kDportFieldNumber;
const int ORMTransaction::kProtocolFieldNumber;
const int ORMTransaction::kServiceFieldNumber;
const int ORMTransaction::kTcpSeqFieldNumber;
const int ORMTransaction::kTcpAckSeqFieldNumber;
const int ORMTransaction::kDrtFieldNumber;
const int ORMTransaction::kSeqFieldNumber;
const int ORMTransaction::kDurationFieldNumber;
const int ORMTransaction::kDataLenFieldNumber;
const int ORMTransaction::kOperateFieldNumber;
const int ORMTransaction::kObjectFieldNumber;
const int ORMTransaction::kResultFieldNumber;
const int ORMTransaction::kDataFieldNumber;
#endif  // !_MSC_VER

ORMTransaction::ORMTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ORMTransaction::InitAsDefaultInstance() {
  ts_ = const_cast< ::StreamPackage::timeval*>(&::StreamPackage::timeval::default_instance());
}

ORMTransaction::ORMTransaction(const ORMTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ORMTransaction::SharedCtor() {
  _cached_size_ = 0;
  sid_ = GOOGLE_LONGLONG(0);
  ts_ = NULL;
  sip_ = 0u;
  dip_ = 0u;
  sport_ = 0u;
  dport_ = 0u;
  protocol_ = 0;
  service_ = 0;
  tcp_seq_ = 0u;
  tcp_ack_seq_ = 0u;
  drt_ = 0;
  seq_ = 0;
  duration_ = 0;
  data_len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ORMTransaction::~ORMTransaction() {
  SharedDtor();
}

void ORMTransaction::SharedDtor() {
  if (this != default_instance_) {
    delete ts_;
  }
}

void ORMTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ORMTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ORMTransaction_descriptor_;
}

const ORMTransaction& ORMTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stream_2eproto();
  return *default_instance_;
}

ORMTransaction* ORMTransaction::default_instance_ = NULL;

ORMTransaction* ORMTransaction::New() const {
  return new ORMTransaction;
}

void ORMTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = GOOGLE_LONGLONG(0);
    if (has_ts()) {
      if (ts_ != NULL) ts_->::StreamPackage::timeval::Clear();
    }
    sip_ = 0u;
    dip_ = 0u;
    sport_ = 0u;
    dport_ = 0u;
    protocol_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    service_ = 0;
    tcp_seq_ = 0u;
    tcp_ack_seq_ = 0u;
    drt_ = 0;
    seq_ = 0;
    duration_ = 0;
    data_len_ = 0;
  }
  account_.Clear();
  operate_.Clear();
  object_.Clear();
  result_.Clear();
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ORMTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ts;
        break;
      }

      // required .StreamPackage.timeval ts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // repeated bytes account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        if (input->ExpectTag(32)) goto parse_sip;
        break;
      }

      // required uint32 sip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sip_)));
          set_has_sip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dip;
        break;
      }

      // required uint32 dip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dip_)));
          set_has_dip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sport;
        break;
      }

      // required uint32 sport = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sport_)));
          set_has_sport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dport;
        break;
      }

      // required uint32 dport = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dport_)));
          set_has_dport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_protocol;
        break;
      }

      // required int32 protocol = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_)));
          set_has_protocol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_service;
        break;
      }

      // required int32 service = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_)));
          set_has_service();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tcp_seq;
        break;
      }

      // required uint32 tcp_seq = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcp_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_seq_)));
          set_has_tcp_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tcp_ack_seq;
        break;
      }

      // required uint32 tcp_ack_seq = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcp_ack_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_ack_seq_)));
          set_has_tcp_ack_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_drt;
        break;
      }

      // required .StreamPackage.ORMTransaction.direct drt = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StreamPackage::ORMTransaction_direct_IsValid(value)) {
            set_drt(static_cast< ::StreamPackage::ORMTransaction_direct >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_seq;
        break;
      }

      // required int32 seq = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_duration;
        break;
      }

      // required int32 duration = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_data_len;
        break;
      }

      // required int32 data_len = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_len_)));
          set_has_data_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_operate;
        break;
      }

      // repeated bytes operate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_operate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_operate;
        if (input->ExpectTag(138)) goto parse_object;
        break;
      }

      // repeated bytes object = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_object;
        if (input->ExpectTag(146)) goto parse_result;
        break;
      }

      // repeated bytes result = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_result;
        if (input->ExpectTag(154)) goto parse_data;
        break;
      }

      // repeated bytes data = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ORMTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sid(), output);
  }

  // required .StreamPackage.timeval ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ts(), output);
  }

  // repeated bytes account = 3;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->account(i), output);
  }

  // required uint32 sip = 4;
  if (has_sip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sip(), output);
  }

  // required uint32 dip = 5;
  if (has_dip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dip(), output);
  }

  // required uint32 sport = 6;
  if (has_sport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sport(), output);
  }

  // required uint32 dport = 7;
  if (has_dport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dport(), output);
  }

  // required int32 protocol = 8;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->protocol(), output);
  }

  // required int32 service = 9;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->service(), output);
  }

  // required uint32 tcp_seq = 10;
  if (has_tcp_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tcp_seq(), output);
  }

  // required uint32 tcp_ack_seq = 11;
  if (has_tcp_ack_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->tcp_ack_seq(), output);
  }

  // required .StreamPackage.ORMTransaction.direct drt = 12;
  if (has_drt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->drt(), output);
  }

  // required int32 seq = 13;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->seq(), output);
  }

  // required int32 duration = 14;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->duration(), output);
  }

  // required int32 data_len = 15;
  if (has_data_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->data_len(), output);
  }

  // repeated bytes operate = 16;
  for (int i = 0; i < this->operate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->operate(i), output);
  }

  // repeated bytes object = 17;
  for (int i = 0; i < this->object_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->object(i), output);
  }

  // repeated bytes result = 18;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->result(i), output);
  }

  // repeated bytes data = 19;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      19, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ORMTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sid(), target);
  }

  // required .StreamPackage.timeval ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ts(), target);
  }

  // repeated bytes account = 3;
  for (int i = 0; i < this->account_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->account(i), target);
  }

  // required uint32 sip = 4;
  if (has_sip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sip(), target);
  }

  // required uint32 dip = 5;
  if (has_dip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dip(), target);
  }

  // required uint32 sport = 6;
  if (has_sport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sport(), target);
  }

  // required uint32 dport = 7;
  if (has_dport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dport(), target);
  }

  // required int32 protocol = 8;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->protocol(), target);
  }

  // required int32 service = 9;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->service(), target);
  }

  // required uint32 tcp_seq = 10;
  if (has_tcp_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tcp_seq(), target);
  }

  // required uint32 tcp_ack_seq = 11;
  if (has_tcp_ack_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->tcp_ack_seq(), target);
  }

  // required .StreamPackage.ORMTransaction.direct drt = 12;
  if (has_drt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->drt(), target);
  }

  // required int32 seq = 13;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->seq(), target);
  }

  // required int32 duration = 14;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->duration(), target);
  }

  // required int32 data_len = 15;
  if (has_data_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->data_len(), target);
  }

  // repeated bytes operate = 16;
  for (int i = 0; i < this->operate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(16, this->operate(i), target);
  }

  // repeated bytes object = 17;
  for (int i = 0; i < this->object_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(17, this->object(i), target);
  }

  // repeated bytes result = 18;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(18, this->result(i), target);
  }

  // repeated bytes data = 19;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(19, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ORMTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sid());
    }

    // required .StreamPackage.timeval ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ts());
    }

    // required uint32 sip = 4;
    if (has_sip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sip());
    }

    // required uint32 dip = 5;
    if (has_dip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dip());
    }

    // required uint32 sport = 6;
    if (has_sport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sport());
    }

    // required uint32 dport = 7;
    if (has_dport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dport());
    }

    // required int32 protocol = 8;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocol());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 service = 9;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->service());
    }

    // required uint32 tcp_seq = 10;
    if (has_tcp_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcp_seq());
    }

    // required uint32 tcp_ack_seq = 11;
    if (has_tcp_ack_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcp_ack_seq());
    }

    // required .StreamPackage.ORMTransaction.direct drt = 12;
    if (has_drt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->drt());
    }

    // required int32 seq = 13;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

    // required int32 duration = 14;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // required int32 data_len = 15;
    if (has_data_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_len());
    }

  }
  // repeated bytes account = 3;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->account(i));
  }

  // repeated bytes operate = 16;
  total_size += 2 * this->operate_size();
  for (int i = 0; i < this->operate_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->operate(i));
  }

  // repeated bytes object = 17;
  total_size += 2 * this->object_size();
  for (int i = 0; i < this->object_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->object(i));
  }

  // repeated bytes result = 18;
  total_size += 2 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->result(i));
  }

  // repeated bytes data = 19;
  total_size += 2 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ORMTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ORMTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ORMTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ORMTransaction::MergeFrom(const ORMTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_.MergeFrom(from.account_);
  operate_.MergeFrom(from.operate_);
  object_.MergeFrom(from.object_);
  result_.MergeFrom(from.result_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_ts()) {
      mutable_ts()->::StreamPackage::timeval::MergeFrom(from.ts());
    }
    if (from.has_sip()) {
      set_sip(from.sip());
    }
    if (from.has_dip()) {
      set_dip(from.dip());
    }
    if (from.has_sport()) {
      set_sport(from.sport());
    }
    if (from.has_dport()) {
      set_dport(from.dport());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_tcp_seq()) {
      set_tcp_seq(from.tcp_seq());
    }
    if (from.has_tcp_ack_seq()) {
      set_tcp_ack_seq(from.tcp_ack_seq());
    }
    if (from.has_drt()) {
      set_drt(from.drt());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_data_len()) {
      set_data_len(from.data_len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ORMTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ORMTransaction::CopyFrom(const ORMTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ORMTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007ffb) != 0x00007ffb) return false;

  if (has_ts()) {
    if (!this->ts().IsInitialized()) return false;
  }
  return true;
}

void ORMTransaction::Swap(ORMTransaction* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(ts_, other->ts_);
    account_.Swap(&other->account_);
    std::swap(sip_, other->sip_);
    std::swap(dip_, other->dip_);
    std::swap(sport_, other->sport_);
    std::swap(dport_, other->dport_);
    std::swap(protocol_, other->protocol_);
    std::swap(service_, other->service_);
    std::swap(tcp_seq_, other->tcp_seq_);
    std::swap(tcp_ack_seq_, other->tcp_ack_seq_);
    std::swap(drt_, other->drt_);
    std::swap(seq_, other->seq_);
    std::swap(duration_, other->duration_);
    std::swap(data_len_, other->data_len_);
    operate_.Swap(&other->operate_);
    object_.Swap(&other->object_);
    result_.Swap(&other->result_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ORMTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ORMTransaction_descriptor_;
  metadata.reflection = ORMTransaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stream::kKeyFieldNumber;
const int Stream::kMacFieldNumber;
const int Stream::kBeginFieldNumber;
const int Stream::kLiveFieldNumber;
const int Stream::kServiceFieldNumber;
const int Stream::kSeqFieldNumber;
const int Stream::kAckSeqFieldNumber;
const int Stream::kStatFieldNumber;
const int Stream::kFlagFieldNumber;
const int Stream::kSidFieldNumber;
const int Stream::kDevidFieldNumber;
const int Stream::kRidFieldNumber;
const int Stream::kAccountFieldNumber;
const int Stream::kBytesFieldNumber;
const int Stream::kPacketsFieldNumber;
const int Stream::kRecordsFieldNumber;
const int Stream::kClientFieldNumber;
const int Stream::kServerFieldNumber;
const int Stream::kResponseFieldNumber;
const int Stream::kPrivateDataFieldNumber;
const int Stream::kTransFieldNumber;
#endif  // !_MSC_VER

Stream::Stream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stream::InitAsDefaultInstance() {
  key_ = const_cast< ::StreamPackage::StreamKey*>(&::StreamPackage::StreamKey::default_instance());
  begin_ = const_cast< ::StreamPackage::timeval*>(&::StreamPackage::timeval::default_instance());
  trans_ = const_cast< ::StreamPackage::ORMTransaction*>(&::StreamPackage::ORMTransaction::default_instance());
}

Stream::Stream(const Stream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stream::SharedCtor() {
  _cached_size_ = 0;
  key_ = NULL;
  begin_ = NULL;
  live_ = GOOGLE_LONGLONG(0);
  service_ = 0;
  seq_ = 0u;
  ack_seq_ = 0u;
  stat_ = 0;
  flag_ = 0;
  sid_ = GOOGLE_LONGLONG(0);
  devid_ = 0;
  rid_ = 0;
  bytes_ = 0u;
  packets_ = 0u;
  records_ = 0u;
  trans_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stream::~Stream() {
  SharedDtor();
}

void Stream::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete begin_;
    delete trans_;
  }
}

void Stream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stream_descriptor_;
}

const Stream& Stream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stream_2eproto();
  return *default_instance_;
}

Stream* Stream::default_instance_ = NULL;

Stream* Stream::New() const {
  return new Stream;
}

void Stream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != NULL) key_->::StreamPackage::StreamKey::Clear();
    }
    if (has_begin()) {
      if (begin_ != NULL) begin_->::StreamPackage::timeval::Clear();
    }
    live_ = GOOGLE_LONGLONG(0);
    service_ = 0;
    seq_ = 0u;
    ack_seq_ = 0u;
    stat_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flag_ = 0;
    sid_ = GOOGLE_LONGLONG(0);
    devid_ = 0;
    rid_ = 0;
    bytes_ = 0u;
    packets_ = 0u;
    records_ = 0u;
  }
  if (_has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    if (has_trans()) {
      if (trans_ != NULL) trans_->::StreamPackage::ORMTransaction::Clear();
    }
  }
  mac_.Clear();
  account_.Clear();
  client_.Clear();
  server_.Clear();
  response_.Clear();
  private_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .StreamPackage.StreamKey key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mac;
        break;
      }

      // repeated bytes mac = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_mac()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mac;
        if (input->ExpectTag(26)) goto parse_begin;
        break;
      }

      // required .StreamPackage.timeval begin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_begin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_live;
        break;
      }

      // required int64 live = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_live:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &live_)));
          set_has_live();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_service;
        break;
      }

      // required int32 service = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_)));
          set_has_service();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seq;
        break;
      }

      // required uint32 seq = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ack_seq;
        break;
      }

      // required uint32 ack_seq = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_seq_)));
          set_has_ack_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_stat;
        break;
      }

      // required int32 stat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_flag;
        break;
      }

      // required int32 flag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sid;
        break;
      }

      // required int64 sid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_devid;
        break;
      }

      // required int32 devid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devid_)));
          set_has_devid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_rid;
        break;
      }

      // required int32 rid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_account;
        break;
      }

      // repeated bytes account = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_account;
        if (input->ExpectTag(112)) goto parse_bytes;
        break;
      }

      // required uint32 bytes = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_)));
          set_has_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_packets;
        break;
      }

      // required uint32 packets = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packets_)));
          set_has_packets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_records;
        break;
      }

      // required uint32 records = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_records:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &records_)));
          set_has_records();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_client;
        break;
      }

      // repeated bytes client = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_client()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_client;
        if (input->ExpectTag(146)) goto parse_server;
        break;
      }

      // repeated bytes server = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_server;
        if (input->ExpectTag(154)) goto parse_response;
        break;
      }

      // repeated bytes response = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_response;
        if (input->ExpectTag(162)) goto parse_private_data;
        break;
      }

      // repeated bytes private_data = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_private_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_private_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_private_data;
        if (input->ExpectTag(170)) goto parse_trans;
        break;
      }

      // required .StreamPackage.ORMTransaction trans = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .StreamPackage.StreamKey key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->key(), output);
  }

  // repeated bytes mac = 2;
  for (int i = 0; i < this->mac_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->mac(i), output);
  }

  // required .StreamPackage.timeval begin = 3;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->begin(), output);
  }

  // required int64 live = 4;
  if (has_live()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->live(), output);
  }

  // required int32 service = 5;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->service(), output);
  }

  // required uint32 seq = 6;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seq(), output);
  }

  // required uint32 ack_seq = 7;
  if (has_ack_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ack_seq(), output);
  }

  // required int32 stat = 8;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->stat(), output);
  }

  // required int32 flag = 9;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->flag(), output);
  }

  // required int64 sid = 10;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->sid(), output);
  }

  // required int32 devid = 11;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->devid(), output);
  }

  // required int32 rid = 12;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->rid(), output);
  }

  // repeated bytes account = 13;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->account(i), output);
  }

  // required uint32 bytes = 14;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->bytes(), output);
  }

  // required uint32 packets = 15;
  if (has_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->packets(), output);
  }

  // required uint32 records = 16;
  if (has_records()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->records(), output);
  }

  // repeated bytes client = 17;
  for (int i = 0; i < this->client_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->client(i), output);
  }

  // repeated bytes server = 18;
  for (int i = 0; i < this->server_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->server(i), output);
  }

  // repeated bytes response = 19;
  for (int i = 0; i < this->response_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      19, this->response(i), output);
  }

  // repeated bytes private_data = 20;
  for (int i = 0; i < this->private_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->private_data(i), output);
  }

  // required .StreamPackage.ORMTransaction trans = 21;
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->trans(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .StreamPackage.StreamKey key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->key(), target);
  }

  // repeated bytes mac = 2;
  for (int i = 0; i < this->mac_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->mac(i), target);
  }

  // required .StreamPackage.timeval begin = 3;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->begin(), target);
  }

  // required int64 live = 4;
  if (has_live()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->live(), target);
  }

  // required int32 service = 5;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->service(), target);
  }

  // required uint32 seq = 6;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seq(), target);
  }

  // required uint32 ack_seq = 7;
  if (has_ack_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ack_seq(), target);
  }

  // required int32 stat = 8;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->stat(), target);
  }

  // required int32 flag = 9;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->flag(), target);
  }

  // required int64 sid = 10;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->sid(), target);
  }

  // required int32 devid = 11;
  if (has_devid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->devid(), target);
  }

  // required int32 rid = 12;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->rid(), target);
  }

  // repeated bytes account = 13;
  for (int i = 0; i < this->account_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(13, this->account(i), target);
  }

  // required uint32 bytes = 14;
  if (has_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->bytes(), target);
  }

  // required uint32 packets = 15;
  if (has_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->packets(), target);
  }

  // required uint32 records = 16;
  if (has_records()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->records(), target);
  }

  // repeated bytes client = 17;
  for (int i = 0; i < this->client_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(17, this->client(i), target);
  }

  // repeated bytes server = 18;
  for (int i = 0; i < this->server_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(18, this->server(i), target);
  }

  // repeated bytes response = 19;
  for (int i = 0; i < this->response_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(19, this->response(i), target);
  }

  // repeated bytes private_data = 20;
  for (int i = 0; i < this->private_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(20, this->private_data(i), target);
  }

  // required .StreamPackage.ORMTransaction trans = 21;
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->trans(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .StreamPackage.StreamKey key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // required .StreamPackage.timeval begin = 3;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->begin());
    }

    // required int64 live = 4;
    if (has_live()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->live());
    }

    // required int32 service = 5;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->service());
    }

    // required uint32 seq = 6;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // required uint32 ack_seq = 7;
    if (has_ack_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_seq());
    }

    // required int32 stat = 8;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 flag = 9;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // required int64 sid = 10;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sid());
    }

    // required int32 devid = 11;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devid());
    }

    // required int32 rid = 12;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rid());
    }

    // required uint32 bytes = 14;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes());
    }

    // required uint32 packets = 15;
    if (has_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packets());
    }

    // required uint32 records = 16;
    if (has_records()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->records());
    }

  }
  if (_has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    // required .StreamPackage.ORMTransaction trans = 21;
    if (has_trans()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trans());
    }

  }
  // repeated bytes mac = 2;
  total_size += 1 * this->mac_size();
  for (int i = 0; i < this->mac_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->mac(i));
  }

  // repeated bytes account = 13;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->account(i));
  }

  // repeated bytes client = 17;
  total_size += 2 * this->client_size();
  for (int i = 0; i < this->client_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->client(i));
  }

  // repeated bytes server = 18;
  total_size += 2 * this->server_size();
  for (int i = 0; i < this->server_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->server(i));
  }

  // repeated bytes response = 19;
  total_size += 2 * this->response_size();
  for (int i = 0; i < this->response_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->response(i));
  }

  // repeated bytes private_data = 20;
  total_size += 2 * this->private_data_size();
  for (int i = 0; i < this->private_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->private_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
  GOOGLE_CHECK_NE(&from, this);
  mac_.MergeFrom(from.mac_);
  account_.MergeFrom(from.account_);
  client_.MergeFrom(from.client_);
  server_.MergeFrom(from.server_);
  response_.MergeFrom(from.response_);
  private_data_.MergeFrom(from.private_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      mutable_key()->::StreamPackage::StreamKey::MergeFrom(from.key());
    }
    if (from.has_begin()) {
      mutable_begin()->::StreamPackage::timeval::MergeFrom(from.begin());
    }
    if (from.has_live()) {
      set_live(from.live());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_ack_seq()) {
      set_ack_seq(from.ack_seq());
    }
    if (from.has_stat()) {
      set_stat(from.stat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_packets()) {
      set_packets(from.packets());
    }
    if (from.has_records()) {
      set_records(from.records());
    }
  }
  if (from._has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    if (from.has_trans()) {
      mutable_trans()->::StreamPackage::ORMTransaction::MergeFrom(from.trans());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  if ((_has_bits_[0] & 0x0010effd) != 0x0010effd) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_begin()) {
    if (!this->begin().IsInitialized()) return false;
  }
  if (has_trans()) {
    if (!this->trans().IsInitialized()) return false;
  }
  return true;
}

void Stream::Swap(Stream* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    mac_.Swap(&other->mac_);
    std::swap(begin_, other->begin_);
    std::swap(live_, other->live_);
    std::swap(service_, other->service_);
    std::swap(seq_, other->seq_);
    std::swap(ack_seq_, other->ack_seq_);
    std::swap(stat_, other->stat_);
    std::swap(flag_, other->flag_);
    std::swap(sid_, other->sid_);
    std::swap(devid_, other->devid_);
    std::swap(rid_, other->rid_);
    account_.Swap(&other->account_);
    std::swap(bytes_, other->bytes_);
    std::swap(packets_, other->packets_);
    std::swap(records_, other->records_);
    client_.Swap(&other->client_);
    server_.Swap(&other->server_);
    response_.Swap(&other->response_);
    private_data_.Swap(&other->private_data_);
    std::swap(trans_, other->trans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stream_descriptor_;
  metadata.reflection = Stream_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StreamPackage

// @@protoc_insertion_point(global_scope)
